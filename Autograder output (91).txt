See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  FAILED (0 errors, 2 warnings)
API:          PASSED

Spotbugs:     PASSED
PMD:          FAILED (9 warnings)
Checkstyle:   FAILED (0 errors, 13 warnings)

Correctness:  70/70 tests passed
Memory:       10/10 tests passed
Timing:       132/163 tests passed

Aggregate score: 91.20%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
3.2K Sep 21 18:12 BurrowsWheeler.java
1.8K Sep 21 18:12 CircularSuffixArray.java
1.6K Sep 21 18:12 CircularSuffixArrayExt.java
1.6K Sep 21 18:12 LSDext.java
3.1K Sep 21 18:12 LinkedListMTF.java
1.4K Sep 21 18:12 MoveToFront.java
 159 Sep 21 18:12 Node.java
 208 Sep 21 18:12 NodeCh.java
2.0K Sep 21 18:12 Quick3string.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac CircularSuffixArray.java
*-----------------------------------------------------------

% javac BurrowsWheeler.java
*-----------------------------------------------------------
BurrowsWheeler.java:48: warning: [rawtypes] found raw type: Queue
        Queue<Integer>[] idsQueue = (Queue<Integer>[]) new Queue[256];
                                                           ^
  missing type arguments for generic class Queue<Item>
  where Item is a type-variable:
    Item extends Object declared in class Queue
BurrowsWheeler.java:48: warning: [unchecked] unchecked cast
        Queue<Integer>[] idsQueue = (Queue<Integer>[]) new Queue[256];
                                                       ^
  required: Queue<Integer>[]
  found:    Queue[]
2 warnings

% javac MoveToFront.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
CircularSuffixArray:

BurrowsWheeler:

MoveToFront:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------
L P UPM_UNCALLED_PRIVATE_METHOD UPM: The private method 'findFirst()' is never called.  At CircularSuffixArray.java:[lines 37-40]
M D RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT RV: Calls the method 'firstCol()' but ignores its return value. The method, however, does not produce any effect other than returning a value.  At CircularSuffixArray.java:[line 66]
M D URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD UrF: The public or protected variable 'id' is never read. Consider removing it from the class.  At Node.java:[line 7]
M D UUF_UNUSED_PUBLIC_OR_PROTECTED_FIELD UuF: The instance (or static) variable 'stLast' is never used. Consider removing it from the class.  In NodeCh.java


================================================================


% pmd .
*-----------------------------------------------------------
BurrowsWheeler.java:84: Avoid using assignment statements in expressions; this can make code harder to read. [AssignmentInOperand]
CircularSuffixArray.java:36: Avoid unused private methods, such as 'findFirst()'. [UnusedPrivateMethod]
Node.java:2: All instance (and static) variables must be 'private'. [OnlyPrivateInstanceVariables]
Node.java:3: All instance (and static) variables must be 'private'. [OnlyPrivateInstanceVariables]
NodeCh.java:2: All instance (and static) variables must be 'private'. [OnlyPrivateInstanceVariables]
NodeCh.java:3: All instance (and static) variables must be 'private'. [OnlyPrivateInstanceVariables]
NodeCh.java:4: All instance (and static) variables must be 'private'. [OnlyPrivateInstanceVariables]
Quick3string.java:5: Avoid unused private instance (or static) variables, such as 'CUTOFF'. [UnusedPrivateField]
Quick3string.java:66: The method body is empty. If this is your intent, document it with a comment. [UncommentedEmptyMethodBody]
PMD ends with 9 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] BurrowsWheeler.java:79:13: Do not use the letter 'l' as a local variable name. It is hard to distinguish from the number '1'. [LocalVariableName]
[WARN] CircularSuffixArray.java:5:23: Do not use the letter 'l' as an instance variable name. It is hard to distinguish from the number '1'. [MemberName]
[WARN] CircularSuffixArrayExt.java:5:23: Do not use the letter 'l' as an instance variable name. It is hard to distinguish from the number '1'. [MemberName]
[WARN] LinkedListMTF.java:59:14: Do not use the letter 'l' as a local variable name. It is hard to distinguish from the number '1'. [LocalVariableName]
[WARN] LSDext.java:3:43: The parameter variable 'W' must start with a lowercase letter and use camelCase. [ParameterName]
[WARN] LSDext.java:4:13: The local variable 'R' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] LSDext.java:5:13: The local variable 'N' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] LSDext.java:21:13: The local variable 'R' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] LSDext.java:22:13: The local variable 'N' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] LSDext.java:36:13: The local variable 'R' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] LSDext.java:37:13: The local variable 'N' must start with a lowercase letter and use camelCase. [LocalVariableName]
Checkstyle ends with 0 errors and 11 warning.

% custom checkstyle checks for CircularSuffixArray.java
*-----------------------------------------------------------

% custom checkstyle checks for BurrowsWheeler.java
*-----------------------------------------------------------
[WARN] BurrowsWheeler.java:78:9: You should not need to use the 'StringBuilder' data type in this program. [Design]
[WARN] BurrowsWheeler.java:78:28: You should not need to create objects of type 'java.lang.StringBuilder' in this program. [Design]
Checkstyle ends with 0 errors and 2 warnings.

% custom checkstyle checks for MoveToFront.java
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of CircularSuffixArray
*-----------------------------------------------------------
Running 17 total tests.

Test 0: check index() and length() with strings from text files
  * abra.txt
  * weekend.txt
  * banana.txt
==> passed

Test 1: check index() and length() with random binary strings
  * length = 10
  * length = 100
  * length = 1000
==> passed

Test 2: check index() and length() with random uppercase strings
  * length = 10
  * length = 100
  * length = 1000
==> passed

Test 3: check index() and length() with random ASCII strings (excluding 0x00')
  * length = 10
  * length = 100
  * length = 1000
==> passed

Test 4: check index() and length() with random ASCII strings
  * length = 10
  * length = 100
  * length = 1000
==> passed

Test 5: check index() and length() with random extended ASCII strings
  * length = 10
  * length = 100
  * length = 1000
==> passed

Test 6: check index() and length() with strings from text files
  * cadabra.txt
  * amendments.txt
  * moby1.txt
  * dickens1000.txt
==> passed

Test 7: check index() and length() with strings from binary files
  * us.gif
  * CS_bricks.jpg
  * rand1K.bin
==> passed

Test 8: check index() and length() with random strings of length 0, 1, and 2
  * length = 0
  * length = 1
  * length = 2
==> passed

Test 9: check that index() throws an exception when argument is out of bounds
  * string of length 10
  * string of length 100
  * string of length 2
  * string of length 1
  * string of length 0
==> passed

Test 10: check that constructor throws an exception when argument is null
==> passed

Test 11: check that two CircularSuffixArray objects can be created at the same time
  * cadabra.txt and amendments.txt
  * amendments.txt and cadabra.txt
  * dickens1000.txt and cadabra.txt
==> passed

Test 12: check that CircularSuffixArray is immutable
  * string = "ITJXPTSQPWEQVPQIXZHCEXNZWNEXBX"
  * string = "BBBBABAABAAAAAAABBABBBAAABBBAA"
  * string = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
  * string = hex representation: 36 80 72 e5 b8 12 3c 4e 19 93 69 84 a0 14 78 
==> passed

Test 13: check index() and length() with corner-case strings
  * a.txt
  * nomatch.txt
  * zebra.txt
  * alphanum.txt
==> passed

Test 14: check index() and length() with strings that are nontrivial
         circular suffixes of themselves
  * stars.txt
  * couscous.txt
==> passed

Test 15: check index() and length() with unary strings
  * length 10 string over unary alphabet
  * length 100 string over unary alphabet
  * length 1000 string over unary alphabet
==> passed

Test 16: check index() and length() with random strings
         that are nontrivial circular suffixes of themselves
  * length 2 string over binary alphabet, repeated 2 times
  * length 2 string over binary alphabet, repeated 10 times
  * length 5 string over binary alphabet, repeated 2 times
  * length 5 string over binary alphabet, repeated 3 times
  * length 5 string over binary alphabet, repeated 5 times
  * length 7 string over uppercase alphabet, repeated 2 times
  * length 7 string over uppercase alphabet, repeated 3 times
  * length 7 string over uppercase alphabet, repeated 5 times
==> passed

Total: 17/17 tests passed!


================================================================
Testing correctness of MoveToFront
*-----------------------------------------------------------
Running 25 total tests.

Test 1a: check main() on text files
  * java MoveToFront - < abra.txt
  * java MoveToFront - < zebra.txt
  * java MoveToFront - < amendments.txt
  * java MoveToFront - < aesop.txt
==> passed

Test 1b: check main() on text files
  * java MoveToFront + < abra.txt.mtf
  * java MoveToFront + < zebra.txt.mtf
  * java MoveToFront + < amendments.txt.mtf
  * java MoveToFront + < aesop.txt.mtf
==> passed

Test 2a: check parsing of argument "-" in main() on text files
  * java MoveToFront - < abra.txt
  * java MoveToFront - < zebra.txt
  * java MoveToFront - < amendments.txt
  * java MoveToFront - < aesop.txt
==> passed

Test 2b: check parsing of argument "+" in main() on text files
  * java MoveToFront + < abra.txt.mtf
  * java MoveToFront + < zebra.txt.mtf
  * java MoveToFront + < amendments.txt.mtf
  * java MoveToFront + < aesop.txt.mtf
==> passed

Test 3a: check that main() is consistent with encode() on text files
  * abra.txt
  * zebra.txt
  * amendments.txt
  * aesop.txt
==> passed

Test 3b: check that main() is consistent with decode() on text files
  * abra.txt.mtf
  * zebra.txt.mtf
  * amendments.txt.mtf
  * aesop.txt.mtf
==> passed

Test 4a: check encode() on text files
  * abra.txt
  * zebra.txt
  * amendments.txt
  * aesop.txt
  * stars.txt
  * alphanum.txt
  * a.txt
==> passed

Test 4b: check encode() on binary files
  * us.gif
  * CS_bricks.jpg
  * rand10K.bin
==> passed

Test 4c: check encode() on random inputs
  * 10 random characters from { A } alphabet
  * 10 random characters from { A, B } alphabet
  * 10 random characters from { A, T, C, G } alphabet
  * 10 random characters from uppercase letter alphabet
  * 1000 random characters from { A } alphabet
  * 1000 random characters from { A, B } alphabet
  * 1000 random characters from { A, T, C, G } alphabet
  * 1000 random characters from uppercase letter alphabet
==> passed

Test 4d: check encode() on more random inputs
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 5a: check decode() on move-to-front-encoded text files
  * abra.txt.mtf
  * zebra.txt.mtf
  * amendments.txt.mtf
  * aesop.txt.mtf
  * stars.txt.mtf
  * alphanum.txt.mtf
  * a.txt.mtf
==> passed

Test 5b: check decode() on move-to-front encoded binary files
  * us.gif.mtf
  * CS_bricks.jpg.mtf
  * rand10K.bin.mtf
==> passed

Test 5c: check decode() on random inputs
  * 10 random characters from { A } alphabet
  * 10 random characters from { A, B } alphabet
  * 10 random characters from { A, T, C, G } alphabet
  * 10 random characters from uppercase letter alphabet
  * 1000 random characters from { A } alphabet
  * 1000 random characters from { A, B } alphabet
  * 1000 random characters from { A, T, C, G } alphabet
  * 1000 random characters from uppercase letter alphabet
==> passed

Test 5d: check decode() on more random inputs
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 5e: check decode() on random inputs
         that were encoded with move-to-front
  * 10 random characters from { A } alphabet
  * 10 random characters from { A, B } alphabet
  * 10 random characters from { A, T, C, G } alphabet
  * 10 random characters from uppercase letter alphabet
  * 1000 random characters from { A } alphabet
  * 1000 random characters from { A, B } alphabet
  * 1000 random characters from { A, T, C, G } alphabet
  * 1000 random characters from uppercase letter alphabet
==> passed

Test 5f: check decode() on more random inputs
         that were encoded with move-to-front
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 6a: check whether decode(encode()) = original on text files
  * abra.txt
  * zebra.txt
  * amendments.txt
  * aesop.txt
  * stars.txt
  * alphanum.txt
  * a.txt
==> passed

Test 6b: check whether decode(encode()) = original on binary files
  * us.gif
  * CS_bricks.jpg
  * rand10K.bin
==> passed

Test 6c: check that decode(encode()) = original on random inputs
  * 10 random characters from { A } alphabet
  * 10 random characters from { A, B } alphabet
  * 10 random characters from { A, T, C, G } alphabet
  * 10 random characters from uppercase letter alphabet
  * 100 random characters from { A } alphabet
  * 1000 random characters from { A, B } alphabet
  * 1000 random characters from { A, T, C, G } alphabet
  * 1000 random characters from uppercase letter alphabet
==> passed

Test 6d: check that decode(encode()) = original on random inputs
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 7a: check that encode() calls either close() or flush()
  * abra.txt
  * zebra.txt
  * amendments.txt
==> passed

Test 7b: check that decode() calls either close() or flush()
  * abra.txt.mtf
  * zebra.txt.mtf
  * amendments.txt.mtf
==> passed

Test 8a: check encode() on large files
  * aesop.txt
  * rand100K.bin
  * world192.txt
==> passed

Test 8b: check decode() on large files
  * aesop.txt.mtf
  * rand100K.bin.mtf
  * world192.txt.mtf
==> passed

Test 8c: check whether decode(encode()) = original on large files
  * aesop.txt
  * rand100K.bin
  * world192.txt
==> passed


Total: 25/25 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference CircularSuffixArray)
********************************************************************************

Testing correctness of BurrowsWheeler
*-----------------------------------------------------------
Running 28 total tests.

Test 1a: check main() on text files
  * java BurrowsWheeler - < abra.txt
  * java BurrowsWheeler - < zebra.txt
  * java BurrowsWheeler - < cadabra.txt
  * java BurrowsWheeler - < amendments.txt
==> passed

Test 1b: check main() on text files
  * java BurrowsWheeler + < abra.txt.bwt
  * java BurrowsWheeler + < zebra.txt.bwt
  * java BurrowsWheeler + < cadabra.txt.bwt
  * java BurrowsWheeler + < amendments.txt.bwt
==> passed

Test 2a: check parsing of argument "-" in main() on text files
  * java BurrowsWheeler - < abra.txt
  * java BurrowsWheeler - < zebra.txt
  * java BurrowsWheeler - < cadabra.txt
  * java BurrowsWheeler - < amendments.txt
==> passed

Test 2b: check parsing of argument "+" in main() on text files
  * java BurrowsWheeler + < abra.txt.bwt
  * java BurrowsWheeler + < zebra.txt.bwt
  * java BurrowsWheeler + < cadabra.txt.bwt
  * java BurrowsWheeler + < amendments.txt.bwt
==> passed

Test 3a: check that main() is consistent with transform() on text files
  * abra.txt
  * zebra.txt
  * cadabra.txt
  * amendments.txt
==> passed

Test 3b: check that main() is consistent with inverseTransform() on text files
  * abra.txt.bwt
  * zebra.txt.bwt
  * cadabra.txt.bwt
  * amendments.txt.bwt
==> passed

Test 4a: check transform() on text files
  * abra.txt
  * zebra.txt
  * cadabra.txt
  * amendments.txt
==> passed

Test 4b: check transform() on corner-case text files
  * alphanum.txt
  * a.txt
==> passed

Test 4c: check transform() on binary files
  * us.gif
  * CS_bricks.jpg
  * rand10K.bin
==> passed

Test 4d: check transform() on random inputs
  * 10 random characters from binary alphabet
  * 10 random characters from DNA alphabet
  * 10 random characters from uppercase alphabet
  * 1000 random characters from binary alphabet
  * 1000 random characters from DNA alphabet
  * 1000 random characters from uppercase alphabet
==> passed

Test 4e: check transform() on more random inputs
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 4f: check tranform() on random inputs that are circular
         shifts of themselves
  * 5 random strings from unary alphabet
  * 5 random strings from binary alphabet
  * 5 random strings from DNA alphabet
  * 5 random strings from uppercase alphabet
==> passed

Test 5a: check inverseTransform() on text files
  * abra.txt.bwt
  * zebra.txt.bwt
  * cadabra.txt.bwt
  * amendments.txt.bwt
==> passed

Test 5b: check inverseTransform() on corner-case text files
  * alphanum.txt.bwt
  * a.txt.bwt
  * stars.txt.bwt
  * couscous.txt.bwt
==> passed

Test 5c: check inverseTransform() on binary files
  * us.gif.bwt
  * CS_bricks.jpg.bwt
  * rand10K.bin.bwt
==> passed

Test 5d: check inverseTransform() of transform() on random inputs
  * 10 random characters from unary alphabet
  * 10 random characters from binary alphabet
  * 10 random characters from DNA alphabet
  * 10 random characters from uppercase alphabet
  * 100 random characters from unary alphabet
  * 1000 random characters from binary alphabet
  * 1000 random characters from DNA alphabet
  * 1000 random characters from uppercase alphabet
==> passed

Test 5e: check inverseTransform() of transform() on more random inputs
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 6a: check that inverseTransform(transform()) = original on text files
  * abra.txt
  * zebra.txt
  * cadabra.txt
  * amendments.txt
==> passed

Test 6b: check that inverseTransform(transform()) = original on corner-case text files
  * alphanum.txt
  * a.txt
  * stars.txt
  * couscous.txt
==> passed

Test 6c: check that inverseTransform(transform()) = original on binary files
  * us.gif
  * CS_bricks.jpg
  * rand10K.bin
==> passed

Test 6d: check that inverseTransform(tranform()) = original on random inputs
  * 10 random characters from binary alphabet
  * 10 random characters from DNA alphabet
  * 10 random characters from uppercase alphabet
  * 1000 random characters from binary alphabet
  * 1000 random characters from DNA alphabet
  * 1000 random characters from uppercase alphabet
==> passed

Test 6e: check that inverseTransform(tranform()) = original on random inputs
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 6f: check that inverseTransform(tranform()) = original
         on random inputs that are circular shifts of themselves
  * random strings from unary alphabet
  * random strings from binary alphabet
  * random strings from DNA alphabet
  * random strings from uppercase alphabet
==> passed

Test 7a: check that transform() calls either close() or flush()
  * abra.txt
  * zebra.txt
  * cadabra.txt
  * amendments.txt
==> passed

Test 7b: check that inverseTransform() calls either close() or flush()
  * abra.txt.bwt
  * zebra.txt.bwt
  * cadabra.txt.bwt
  * amendments.txt.bwt
==> passed

Test 8a: check transform() on large files
  * aesop.txt
  * rand100K.bin
  * world192.txt
==> passed

Test 8b: check inverseTransform() on large files
  * aesop.txt.bwt
  * rand100K.bin.bwt
  * world192.txt.bwt
==> passed

Test 8c: check that inverseTransform(transform()) = original on large files
  * aesop.txt
  * rand100K.bin
  * world192.txt
==> passed


Total: 28/28 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of CircularSuffixArray
*-----------------------------------------------------------
Running 10 total tests.

Memory usage of a CircularSuffixArray for a random string of length n.
Maximum allowed memory is 64n + 128.

                 n        bytes
-------------------------------
=> passed       16         1112
=> passed       32         2136
=> passed       64         4184
=> passed      128         8280
=> passed      256        16472
=> passed      512        32856
=> passed     1024        65624
=> passed     2048       131160
=> passed     4096       262232
=> passed     8192       524376
==> 10/10 tests passed

Total: 10/10 tests passed!

Estimated student memory (bytes) = 64.00 n + 88.00   (R^2 = 1.000)

================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing CircularSuffixArray
*-----------------------------------------------------------
Running 26 total tests.

Tests  1-13: time to create a circular suffix array for the first
             n character of dickens.txt and call index(i) for each i

            [ max allowed time = 10 seconds and <= 12x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.01       0.00      15.67
=> passed     2000       0.00       0.00       1.81
=> passed     4000       0.00       0.00       1.98
=> passed     8000       0.01       0.00       6.83
=> passed    16000       0.02       0.00       6.39
=> passed    32000       0.03       0.01       4.96
=> passed    64000       0.10       0.06       1.72
=> passed   128000       0.18       0.02      11.66
=> FAILED   256000       0.51       0.02      21.93
=> passed   512000       1.28       0.25       5.08
=> FAILED  1024000       2.65       0.15      17.19
=> FAILED  2048000       6.01       0.29      20.51
=> FAILED  4096000      15.05       0.93      16.25

Estimated running time (using last 6 measurements)
    = 9.08e-08 * n^1.24  (R^2 = 1.00)


Tests 14-26: time to create circular suffix array for n random ASCII characters
            and call index(i) for each i

            [ max allowed time = 10 seconds and <= 20x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       5.41
=> passed     2000       0.00       0.00       3.49
=> passed     4000       0.00       0.00       5.31
=> passed     8000       0.00       0.00       7.18
=> passed    16000       0.01       0.00      11.96
=> passed    32000       0.03       0.00      20.71
=> passed    64000       0.07       0.00      17.74
=> passed   128000       0.18       0.01      23.32
=> passed   256000       0.42       0.02      19.87
=> passed   512000       1.00       0.17       5.84
=> FAILED  1024000       2.92       0.06      46.77
=> FAILED  2048000       6.72       0.15      43.94
=> FAILED  4096000      14.09       0.55      25.57

Estimated running time (using last 6 measurements)
    = 4.78e-08 * n^1.29  (R^2 = 1.00)


Total: 19/26 tests passed!


================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing MoveToFront
*-----------------------------------------------------------
Running 40 total tests.

Test 1: count calls to methods in BinaryStdOut from encode()
  * abra.txt
  * amendments.txt
==> passed

Test 2: count calls to methods in BinaryStdOut from decode()
  * abra.txt.mtf
  * amendments.txt.mtf
==> passed

Test 3: count calls to methods in BinaryStdIn from encode()
  * abra.txt
    - wrong number of calls to readChar(8) or equivalent
    - n                                  = 12
    - calls to readChar(8) or equivalent = 0
    - minimum number of calls            = 12
    - maximum number of calls            = 12

    - wrong number of calls to isEmpty()
    - n                       = 12
    - calls to isEmpty()      = 0
    - minimum number of calls = 12
    - maximum number of calls = 13

    - wrong number of calls to readString()
    - calls to readString() = 1
    - you should not need to call readString() in this program
    - instead, use readChar()

  * amendments.txt
    - wrong number of calls to readChar(8) or equivalent
    - n                                  = 18369
    - calls to readChar(8) or equivalent = 0
    - minimum number of calls            = 18369
    - maximum number of calls            = 18369

    - wrong number of calls to isEmpty()
    - n                       = 18369
    - calls to isEmpty()      = 0
    - minimum number of calls = 18369
    - maximum number of calls = 18370

    - wrong number of calls to readString()
    - calls to readString() = 1
    - you should not need to call readString() in this program
    - instead, use readChar()

==> FAILED

Test 4: count calls to methods in BinaryStdIn from decode()
  * abra.txt.mtf
    - wrong number of calls to readChar(8) or equivalent
    - n                                  = 12
    - calls to readChar(8) or equivalent = 0
    - minimum number of calls            = 12
    - maximum number of calls            = 12

    - wrong number of calls to isEmpty()
    - n                       = 12
    - calls to isEmpty()      = 0
    - minimum number of calls = 12
    - maximum number of calls = 13

    - wrong number of calls to readString()
    - calls to readString() = 1
    - you should not need to call readString() in this program
    - instead, use readChar()

  * amendments.txt.mtf
    - wrong number of calls to readChar(8) or equivalent
    - n                                  = 18369
    - calls to readChar(8) or equivalent = 0
    - minimum number of calls            = 18369
    - maximum number of calls            = 18369

    - wrong number of calls to isEmpty()
    - n                       = 18369
    - calls to isEmpty()      = 0
    - minimum number of calls = 18369
    - maximum number of calls = 18370

    - wrong number of calls to readString()
    - calls to readString() = 1
    - you should not need to call readString() in this program
    - instead, use readChar()

==> FAILED

Tests  5-14: Timing encode() with first n character of dickens.txt
             [ max allowed time = 2 seconds and <= 4x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       0.88
=> passed     2000       0.00       0.00       1.41
=> passed     4000       0.01       0.00       1.44
=> passed     8000       0.01       0.01       1.45
=> passed    16000       0.02       0.01       1.47
=> passed    32000       0.04       0.03       1.45
=> passed    64000       0.09       0.06       1.48
=> passed   128000       0.17       0.12       1.51
=> passed   256000       0.52       0.38       1.38

Estimated running time (using last 6 measurements)
     = 6.02e-07 * n^1.08  (R^2 = 0.99)


Tests  15-22: Timing encode() with first n character of abab.txt
             [ max allowed time = 2 seconds and <= 4x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       1.51
=> passed     2000       0.00       0.00       0.99
=> passed     4000       0.01       0.00       1.82
=> passed     8000       0.01       0.01       1.79
=> passed    16000       0.03       0.02       1.63
=> passed    32000       0.06       0.04       1.56
=> passed    64000       0.11       0.07       1.63
=> passed   128000       0.20       0.14       1.42
=> passed   256000       0.41       0.29       1.41

Estimated running time (using last 6 measurements)
     = 2.00e-06 * n^0.98  (R^2 = 1.00)


Tests 23-31: Timing decode() with first n character of dickens.txt
             [ max allowed time = 2 seconds and <= 4x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       1.53
=> passed     2000       0.00       0.00       1.43
=> passed     4000       0.01       0.01       1.58
=> passed     8000       0.02       0.01       1.55
=> passed    16000       0.03       0.02       1.49
=> passed    32000       0.06       0.04       1.50
=> passed    64000       0.11       0.06       1.81
=> passed   128000       0.21       0.16       1.33
=> passed   256000       0.34       0.22       1.51

Estimated running time (using last 6 measurements)
     = 5.20e-06 * n^0.90  (R^2 = 1.00)


Tests 32-40: Timing decode() with first n character of abab.txt
             [ max allowed time = 2 seconds and <= 4x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       1.52
=> passed     2000       0.00       0.00       1.46
=> passed     4000       0.00       0.00       1.45
=> passed     8000       0.01       0.01       1.50
=> passed    16000       0.02       0.01       1.44
=> passed    32000       0.04       0.03       1.43
=> passed    64000       0.10       0.05       1.83
=> passed   128000       0.26       0.13       2.06
=> passed   256000       0.38       0.29       1.32

Estimated running time (using last 6 measurements)
     = 5.65e-07 * n^1.09  (R^2 = 0.99)


Total: 38/40 tests passed!


================================================================



********************************************************************************
*  TIMING (substituting reference CircularSuffixArray)
********************************************************************************

Timing BurrowsWheeler
*-----------------------------------------------------------
Running 97 total tests.

Test 1: count calls to methods in CircularSuffixArray from transform()
  * abra.txt
    - transform() calls to constructor = 0
    - minimum number of calls          = 1
    - maximum number of calls          = 1

    - transform() calls to index() = 0
    - minimum number of calls      = 12
    - maximum number of calls      = 36

  * amendments.txt
    - transform() calls to constructor = 0
    - minimum number of calls          = 1
    - maximum number of calls          = 1

    - transform() calls to index() = 0
    - minimum number of calls      = 18369
    - maximum number of calls      = 55107

==> FAILED

Test 2: count calls to methods in CircularSuffixArray from inverseTransform()
  * abra.txt.bwt
  * amendments.txt.bwt
==> passed

Test 3: count calls to methods in BinaryStdOut from transform()
  * abra.txt
  * amendments.txt
==> passed

Test 4: count calls to methods in BinaryStdOut from inverseTransform()
  * abra.txt.bwt
  * amendments.txt.bwt
==> passed

Test 5: count calls to methods in BinaryStdIn from transform()
  * abra.txt
  * amendments.txt
==> passed

Test 6: count calls to methods in BinaryStdIn from inverseTransform()
  * abra.txt.bwt
  * amendments.txt.bwt
==> passed

Tests  7-19: timing transform() with first n character of dickens.txt
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       0.15
=> passed     2000       0.00       0.00       0.88
=> passed     4000       0.00       0.00       0.98
=> passed     8000       0.01       0.00       1.67
=> passed    16000       0.01       0.01       1.51
=> passed    32000       0.03       0.01       3.03
=> passed    64000       0.10       0.01       8.03
=> passed   128000       0.17       0.02       7.17
=> FAILED   256000       0.59       0.04      13.92
=> FAILED   512000       1.27       0.08      15.23
=> FAILED  1024000       3.27       0.22      14.82
=> FAILED  2048000
=> FAILED  4096000

Estimated running time as a function of n (using last 6 measurements)
    = 2.53e-08 * n^1.35  (R^2 = 0.99)


Tests 20-32: timing transform() with first n character of random.bin
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       2.92
=> passed     2000       0.00       0.00       4.39
=> passed     4000       0.00       0.00       4.75
=> passed     8000       0.00       0.00       5.29
=> passed    16000       0.01       0.00       3.85
=> passed    32000       0.02       0.01       4.06
=> passed    64000       0.09       0.01       9.62
=> passed   128000       0.20       0.04       4.61
=> FAILED   256000       0.53       0.04      13.08
=> passed   512000       1.28       0.18       6.97
=> FAILED  1024000       2.76       0.24      11.62
=> FAILED  2048000
=> FAILED  4096000

Estimated running time as a function of n (using last 6 measurements)
    = 2.27e-08 * n^1.36  (R^2 = 0.99)


Tests 33-45: timing transform() with first n character of abab.txt
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.01       0.00      84.28
=> passed     2000       0.06       0.00     253.72
=> FAILED     4000       0.21       0.00     427.24
=> FAILED     8000       0.87       0.00     926.28

    java.lang.StackOverflowError

    Quick3string.sort(Quick3string.java:45)
    Quick3string.sort(Quick3string.java:46)
    Quick3string.sort(Quick3string.java:46)
    Quick3string.sort(Quick3string.java:46)
    Quick3string.sort(Quick3string.java:46)
    ...
    Quick3string.sort(Quick3string.java:46)
    Quick3string.sort(Quick3string.java:46)
    Quick3string.sort(Quick3string.java:46)
    Quick3string.sort(Quick3string.java:46)
    Quick3string.sort(Quick3string.java:46)

=> FAILED    16000   Infinity       0.00   Infinity
=> FAILED    32000
=> FAILED    64000
=> FAILED   128000
=> FAILED   256000
=> FAILED   512000
=> FAILED  1024000
=> FAILED  2048000
=> FAILED  4096000

Estimated running time as a function of n (using last 4 measurements)
    = 2.07e-08 * n^1.95  (R^2 = 1.00)


Tests 46-58: timing inverseTransform() with first n character of dickens.txt
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       1.87
=> passed     2000       0.00       0.00       1.81
=> passed     4000       0.00       0.00       1.86
=> passed     8000       0.00       0.00       1.38
=> passed    16000       0.00       0.00       0.86
=> passed    32000       0.00       0.00       1.65
=> passed    64000       0.01       0.00       1.97
=> passed   128000       0.02       0.01       1.49
=> passed   256000       0.03       0.01       2.95
=> passed   512000       0.05       0.04       1.28
=> passed  1024000       0.14       0.10       1.44
=> passed  2048000       0.36       0.21       1.69
=> passed  4096000       0.75       0.50       1.49

Estimated running time as a function of n (using last 6 measurements)
    = 3.03e-08 * n^1.11  (R^2 = 0.98)


Tests 59-71: timing inverseTransform() with first n character of random.bin
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1024       0.00       0.00       2.27
=> passed     2048       0.00       0.00       2.74
=> passed     4096       0.00       0.00       1.91
=> passed     8192       0.00       0.06       0.01
=> passed    16384       0.00       0.00       1.85
=> passed    32768       0.00       0.00       2.02
=> passed    65536       0.01       0.00       2.29
=> passed   131072       0.01       0.01       2.53
=> passed   262144       0.03       0.01       2.42
=> passed   524288       0.05       0.02       2.36
=> passed  1048576       0.14       0.09       1.59
=> passed  2097152       0.41       0.28       1.44
=> passed  4194304       0.79       0.58       1.36

Estimated running time as a function of n (using last 6 measurements)
    = 7.55e-09 * n^1.21  (R^2 = 0.99)


Tests 72-84: timing inverseTransform() with first n character of abab.txt
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       1.86
=> passed     2000       0.00       0.00       1.83
=> passed     4000       0.00       0.00       2.80
=> passed     8000       0.00       0.00       2.43
=> passed    16000       0.00       0.00       1.40
=> passed    32000       0.00       0.00       2.15
=> passed    64000       0.00       0.00       2.12
=> passed   128000       0.01       0.00       2.90
=> passed   256000       0.01       0.01       2.04
=> passed   512000       0.02       0.01       1.55
=> passed  1024000       0.04       0.02       1.83
=> passed  2048000       0.10       0.05       1.97
=> passed  4096000       0.22       0.11       1.88

==> FAILED.   inverseTransform() is possibly n R, n log n, n^2, or worse.
              The code is at least twice as slow as the reference solution.
              Manually check the code.

Estimated running time as a function of n (using last 6 measurements)
    = 7.45e-08 * n^0.97  (R^2 = 0.99)


Tests 85-97: timing inverseTransform() with first n character of cyclic.bin
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1024       0.00       0.00       2.72
=> passed     2048       0.00       0.00       1.76
=> passed     4096       0.00       0.00       1.78
=> passed     8192       0.00       0.00       2.03
=> passed    16384       0.00       0.00       1.81
=> passed    32768       0.00       0.00       2.36
=> passed    65536       0.00       0.00       1.97
=> passed   131072       0.01       0.00       2.36
=> passed   262144       0.01       0.01       1.20
=> passed   524288       0.03       0.03       1.34
=> passed  1048576       0.08       0.04       1.84
=> passed  2097152       0.13       0.09       1.36
=> passed  4194304       0.32       0.21       1.52

Estimated running time as a function of n (using last 6 measurements)
    = 2.16e-08 * n^1.08  (R^2 = 1.00)


Total: 75/97 tests passed!


================================================================